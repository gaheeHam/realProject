<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!--http://.../spring-security-5.0.xsd 이렇게 설정되면 스프링 4.2이상에서는 버그가 발생함 5.0 삭제할것 -->
	<!-- 
		1. security-context.xml 작성
			1.1 로그인에는 화면이 있는 폼 로그인과 화면이 존재하지 않는 basic auth, digest auth가 있다
			1.2 폼 로그인에 대한 자동 설정을 활성화한다 : <http auto-config:true>
			1.3 폼 로그인을 커스터마이즈 한다
				아이디, 비밀번호, 로그인페이지 보여주는 주소, 로그인 처리 주소, 로그인 후 이동할 주소, 로그인 실패 시 이동할 주소
			
			1.4 로그인 후 이동 장소를 원래 갈려던 곳으로 갈려면 LoginSuccessHandler를 작성 후 등록해야 한다(교재 637p 참고)
			1.5 로그아웃 처리할 주소(post), 로그아웃 후 이동할 주소
			
			2.1 사용자 인증 서비스를 등록한다
			2.2 사용자 권한은 단순한 문자열로 누적되지 않으며 기본적으로 ROLE_로 시작한다
				ROLE_ADMIN은 ROLE_USER를 포함하지 않는다
			2.3 반드시 패스워드 인코더를 등록해야 한다  ????
		2. web.xml에 등록
			
		3. annotation을 활성화한다
			
		4. annotation을 사용한다
		
	 -->
	<!-- 스프링 시큐리티 반드시 암호화 클래스를 등록해야 함. -->
	
	
	
	<bean id="passwordEncoderTest" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="customLoginSuccessTest" class="com.icia.commonUsers.CustomLoginSuccessHandler"></bean>
	<!-- 1.3 -->
	<!-- username-parameter="username"(의미상 id),password-parameter="password"는 기본값이며
	       폼태그의 name속성명과 일치할 것. -->
	<!-- default-target-url="/" 로그인후 루트로 이동 -->
	<sec:http auto-config="true" use-expressions="true">
		<sec:form-login 
			username-parameter="mb_id"     
			password-parameter="mb_pw"   
			login-page="/goLoginPage"    
			login-processing-url="/stud/selectaccesspage"
			default-target-url="/stud/goLoginFrm" 
		 	authentication-success-handler-ref="customLoginSuccessTest"
			authentication-failure-url="/gologinpage2"   
		/>
			<!-- location.search.substring(6) : true-->
		<!-- 1.5 -->
		<!-- logout-url은 Controller에 명시할필요 없음 -->
		<sec:logout 
			logout-url="/gologout" invalidate-session="true"
			logout-success-url="/"
		/>
	 <sec:intercept-url pattern="/stud/**" access="hasAnyRole('ROLE_STUD','ROLE_PROF')"/>
	<sec:intercept-url pattern="/prof/**" access="hasRole('ROLE_PROF')"/>
	<sec:intercept-url pattern="/admi/**" access="hasRole('ROLE_ADMI')"/> 
	<sec:intercept-url pattern="/**" access="permitAll"/>

	</sec:http>
	
	<!-- DB에서 작업할때는 계정 생략한다. -->
	<!-- <sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="admin" password="1234" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" />
				<sec:user name="manager" password="1234" authorities="ROLE_USER, ROLE_MANAGER" />
				<sec:user name="user" password="1234" authorities="ROLE_USER" />
			</sec:user-service>
			<sec:password-encoder ref="passwordEncoder" /> 암호화 방법 
		</sec:authentication-provider>
	</sec:authentication-manager> -->
	
	<!-- JDBC를 이용한 로그인 -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select mb_id, mb_pw, enabled FROM member WHERE mb_id=?"
				authorities-by-username-query="select at_id, at_at FROM authority WHERE at_id=?" />
			<sec:password-encoder ref="passwordEncoderTest" />
			
		</sec:authentication-provider>
	</sec:authentication-manager>
	

	
		 
</beans>
